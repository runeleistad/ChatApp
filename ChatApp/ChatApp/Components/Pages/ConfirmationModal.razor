@using ChatApp.Data.Models
@using ChatApp.Services
@inject ChatService chatService

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add contact</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to add @User.Email to you contacts?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddNewContact">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    public ApplicationUser User { get; set; } = new(); // sikrer at @user.Email ikke feiler
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    [Parameter]
    public EventCallback OnCloseCallback { get; set; }

    public void Open(ApplicationUser newContact)
    {
        User = newContact;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public async void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        await InvokeAsync(() => OnCloseCallback.InvokeAsync());
    }

    private async void AddNewContact()
    {
        await chatService.AddContact(User);
        Close();
    }
}
